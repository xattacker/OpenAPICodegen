/**
* MOTC Transport  API V2
* </div>   <div class=\"info_description markdown\">本平臺提供涵蓋全國尺度之公車、臺鐵、高鐵、捷運、航空、自行車等公共運輸旅運資料服務API，歡迎各產政學單位介接使用。<br><span class=\"swagger-description-indicatation\">利用本平臺開放資料進行各項應用服務開發時，請考量不同特性使用者(如:性別/殘障/視障/老幼等)的需求，並歡迎回饋寶貴意見。</span><br><br>資料使用葵花寶典:<a href= https://ptxmotc.gitbooks.io/ptx-api-documentation/content/ >請點我</a><br>資料服務開發實作參考手冊:<a href= https://docs.google.com/viewer?url=https://github.com/ptxmotc/PTX_Web/blob/master/Swagger%E6%9C%8D%E5%8B%99%E8%AA%AA%E6%98%8E%E4%B8%8A%E5%82%B3%E5%8F%83%E8%80%83%E6%AA%94%E6%A1%88/%E5%85%AC%E5%85%B1%E9%81%8B%E8%BC%B8%E6%95%B4%E5%90%88%E8%B3%87%E8%A8%8A%E5%B9%B3%E5%8F%B0%E8%B3%87%E6%96%99%E6%9C%8D%E5%8B%99%E9%96%8B%E7%99%BC%E5%AF%A6%E4%BD%9C.pdf?raw=true >請點我</a><br>API URI Convention文件說明:<a href= https://docs.google.com/viewer?url=https://github.com/ptxmotc/PTX_Web/blob/master/Swagger%E6%9C%8D%E5%8B%99%E8%AA%AA%E6%98%8E%E4%B8%8A%E5%82%B3%E5%8F%83%E8%80%83%E6%AA%94%E6%A1%88/API_URI_Convention%E6%96%87%E4%BB%B6_v1.pdf?raw=true >請點我</a>
*
* OpenAPI spec version: v2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.apis

import org.openapitools.client.models.ServiceDTOVersion2ApplicationMETAR
import org.openapitools.client.models.ServiceDTOVersion2AviationAirline
import org.openapitools.client.models.ServiceDTOVersion2AviationAirport
import org.openapitools.client.models.ServiceDTOVersion2AviationAirportFIDS
import org.openapitools.client.models.ServiceDTOVersion2AviationFIDS
import org.openapitools.client.models.ServiceDTOVersion2AviationFIDSArrival
import org.openapitools.client.models.ServiceDTOVersion2AviationFIDSDeparture
import org.openapitools.client.models.ServiceDTOVersion2AviationGeneralFlightSchedule

import org.openapitools.client.infrastructure.*

class AirApiApi(basePath: kotlin.String = "http://ptx.transportdata.tw/MOTC") : ApiClient(basePath) {

    /**
    * 取得航空公司資料
    * 取得所有航空公司資料
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2AviationAirline>
    */
    @Suppress("UNCHECKED_CAST")
    fun airApiAirline(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2AviationAirline> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Air/Airline",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2AviationAirline>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2AviationAirline>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[航空公司]資料
    * 取得指定[航空公司]資料
    * @param IATA 航空公司代碼 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @return ServiceDTOVersion2AviationAirline
    */
    @Suppress("UNCHECKED_CAST")
    fun airApiAirline_0(IATA: kotlin.String, &#x60;$format&#x60;: kotlin.String) : ServiceDTOVersion2AviationAirline {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Air/Airline/{IATA}".replace("{"+"IATA"+"}", "$IATA"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ServiceDTOVersion2AviationAirline>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ServiceDTOVersion2AviationAirline
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得機場資料
    * 取得所有機場資料
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @param &#x60;$spatialFilter&#x60; 空間過濾 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2AviationAirport>
    */
    @Suppress("UNCHECKED_CAST")
    fun airApiAirport(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null, &#x60;$spatialFilter&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2AviationAirport> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$spatialFilter" to if (&#x60;$spatialFilter&#x60; != null) listOf("$&#x60;$spatialFilter&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Air/Airport",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2AviationAirport>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2AviationAirport>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[機場]資料
    * 取得指定[機場]資料
    * @param IATA 機場代碼 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @return ServiceDTOVersion2AviationAirport
    */
    @Suppress("UNCHECKED_CAST")
    fun airApiAirport_0(IATA: kotlin.String, &#x60;$format&#x60;: kotlin.String) : ServiceDTOVersion2AviationAirport {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Air/Airport/{IATA}".replace("{"+"IATA"+"}", "$IATA"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ServiceDTOVersion2AviationAirport>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ServiceDTOVersion2AviationAirport
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得機場的即時入境航班
    * 取得機場的即時入境航班
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2AviationFIDSArrival>
    */
    @Suppress("UNCHECKED_CAST")
    fun airApiArrival(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2AviationFIDSArrival> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Air/FIDS/Airport/Arrival",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2AviationFIDSArrival>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2AviationFIDSArrival>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[機場的即時入境航班]
    * 取得[指定機場]的即時入境航班
    * @param IATA 機場代碼 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2AviationFIDSArrival>
    */
    @Suppress("UNCHECKED_CAST")
    fun airApiArrival_0(IATA: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2AviationFIDSArrival> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Air/FIDS/Airport/Arrival/{IATA}".replace("{"+"IATA"+"}", "$IATA"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2AviationFIDSArrival>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2AviationFIDSArrival>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得機場的即時出境航班
    * 取得機場的即時出境航班
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2AviationFIDSDeparture>
    */
    @Suppress("UNCHECKED_CAST")
    fun airApiDeparture(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2AviationFIDSDeparture> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Air/FIDS/Airport/Departure",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2AviationFIDSDeparture>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2AviationFIDSDeparture>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[機場的即時出境航班]
    * 取得指定的[機場即時出境航班]
    * @param IATA 機場代碼 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2AviationFIDSDeparture>
    */
    @Suppress("UNCHECKED_CAST")
    fun airApiDeparture_0(IATA: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2AviationFIDSDeparture> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Air/FIDS/Airport/Departure/{IATA}".replace("{"+"IATA"+"}", "$IATA"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2AviationFIDSDeparture>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2AviationFIDSDeparture>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得國內航空定期時刻表
    * 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2AviationGeneralFlightSchedule>
    */
    @Suppress("UNCHECKED_CAST")
    fun airApiDomestic(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2AviationGeneralFlightSchedule> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Air/GeneralSchedule/Domestic",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2AviationGeneralFlightSchedule>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2AviationGeneralFlightSchedule>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得機場的即時航班資料
    * 取得即時航班資料
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2AviationAirportFIDS>
    */
    @Suppress("UNCHECKED_CAST")
    fun airApiFIDS(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2AviationAirportFIDS> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Air/FIDS/Airport",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2AviationAirportFIDS>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2AviationAirportFIDS>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[機場的即時航班]資料
    * 取得指定[機場的即時航班]資料
    * @param IATA 機場代碼 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2AviationAirportFIDS>
    */
    @Suppress("UNCHECKED_CAST")
    fun airApiFIDS_0(IATA: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2AviationAirportFIDS> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Air/FIDS/Airport/{IATA}".replace("{"+"IATA"+"}", "$IATA"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2AviationAirportFIDS>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2AviationAirportFIDS>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得即時航班資料
    * 取得即時航班資料
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2AviationFIDS>
    */
    @Suppress("UNCHECKED_CAST")
    fun airApiFlight(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2AviationFIDS> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Air/FIDS/Flight",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2AviationFIDS>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2AviationFIDS>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[即時航班]資料
    * 
    * @param flightNo 航機班號 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2AviationFIDS>
    */
    @Suppress("UNCHECKED_CAST")
    fun airApiFlight_0(flightNo: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2AviationFIDS> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Air/FIDS/Flight/{FlightNo}".replace("{"+"FlightNo"+"}", "$flightNo"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2AviationFIDS>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2AviationFIDS>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得國際航空定期時刻表
    * 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2AviationGeneralFlightSchedule>
    */
    @Suppress("UNCHECKED_CAST")
    fun airApiInternational(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2AviationGeneralFlightSchedule> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Air/GeneralSchedule/International",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2AviationGeneralFlightSchedule>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2AviationGeneralFlightSchedule>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得[國內機場]氣象資訊觀測資料
    * 取得[國內機場]氣象資訊觀測資料  &lt;br /&gt;目前提供之機場氣象觀測站代碼清單  &lt;br /&gt;RCSS:松山機場    RCKH:高雄機場  &lt;br /&gt;RCTP:桃園機場    RCMT:北竿機場   &lt;br /&gt;RCFG:南竿機場    RCBS:金門機場   &lt;br /&gt;RCQC:馬公機場    RCMQ:臺中機場   &lt;br /&gt;RCKU:嘉義機場    RCNN:臺南機場   &lt;br /&gt;RCYU:花蓮機場    RCFN:臺東機場   &lt;br /&gt;RCLY:蘭嶼機場    RCGI:綠島機場
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param ticket 預設為guest的ticket (optional, default to null)
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @param &#x60;$spatialFilter&#x60; 空間過濾 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2ApplicationMETAR>
    */
    @Suppress("UNCHECKED_CAST")
    fun airApiMETAR(&#x60;$format&#x60;: kotlin.String, ticket: java.util.UUID? = null, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null, &#x60;$spatialFilter&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2ApplicationMETAR> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("ticket" to if (ticket != null) listOf("$ticket") else null, "$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$spatialFilter" to if (&#x60;$spatialFilter&#x60; != null) listOf("$&#x60;$spatialFilter&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Air/METAR/Airport",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2ApplicationMETAR>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2ApplicationMETAR>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[國內機場]氣象資訊觀測資料
    * 取得指定[國內機場]氣象資訊觀測資料
    * @param IATA 機場代碼 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param ticket 預設為guest的ticket (optional, default to null)
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @param &#x60;$spatialFilter&#x60; 空間過濾 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2ApplicationMETAR>
    */
    @Suppress("UNCHECKED_CAST")
    fun airApiMETAR_0(IATA: kotlin.String, &#x60;$format&#x60;: kotlin.String, ticket: java.util.UUID? = null, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null, &#x60;$spatialFilter&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2ApplicationMETAR> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("ticket" to if (ticket != null) listOf("$ticket") else null, "$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$spatialFilter" to if (&#x60;$spatialFilter&#x60; != null) listOf("$&#x60;$spatialFilter&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Air/METAR/Airport/{IATA}".replace("{"+"IATA"+"}", "$IATA"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2ApplicationMETAR>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2ApplicationMETAR>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
