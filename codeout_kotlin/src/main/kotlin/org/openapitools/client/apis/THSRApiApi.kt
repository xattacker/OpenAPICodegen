/**
* MOTC Transport  API V2
* </div>   <div class=\"info_description markdown\">本平臺提供涵蓋全國尺度之公車、臺鐵、高鐵、捷運、航空、自行車等公共運輸旅運資料服務API，歡迎各產政學單位介接使用。<br><span class=\"swagger-description-indicatation\">利用本平臺開放資料進行各項應用服務開發時，請考量不同特性使用者(如:性別/殘障/視障/老幼等)的需求，並歡迎回饋寶貴意見。</span><br><br>資料使用葵花寶典:<a href= https://ptxmotc.gitbooks.io/ptx-api-documentation/content/ >請點我</a><br>資料服務開發實作參考手冊:<a href= https://docs.google.com/viewer?url=https://github.com/ptxmotc/PTX_Web/blob/master/Swagger%E6%9C%8D%E5%8B%99%E8%AA%AA%E6%98%8E%E4%B8%8A%E5%82%B3%E5%8F%83%E8%80%83%E6%AA%94%E6%A1%88/%E5%85%AC%E5%85%B1%E9%81%8B%E8%BC%B8%E6%95%B4%E5%90%88%E8%B3%87%E8%A8%8A%E5%B9%B3%E5%8F%B0%E8%B3%87%E6%96%99%E6%9C%8D%E5%8B%99%E9%96%8B%E7%99%BC%E5%AF%A6%E4%BD%9C.pdf?raw=true >請點我</a><br>API URI Convention文件說明:<a href= https://docs.google.com/viewer?url=https://github.com/ptxmotc/PTX_Web/blob/master/Swagger%E6%9C%8D%E5%8B%99%E8%AA%AA%E6%98%8E%E4%B8%8A%E5%82%B3%E5%8F%83%E8%80%83%E6%AA%94%E6%A1%88/API_URI_Convention%E6%96%87%E4%BB%B6_v1.pdf?raw=true >請點我</a>
*
* OpenAPI spec version: v2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.apis

import org.openapitools.client.models.MOTCAPIModelsHttpStateModel
import org.openapitools.client.models.ServiceDTOVersion2RailTHSRAlertInfo
import org.openapitools.client.models.ServiceDTOVersion2RailTHSRAvailableSeatStatusList
import org.openapitools.client.models.ServiceDTOVersion2RailTHSRNews
import org.openapitools.client.models.ServiceDTOVersion2RailTHSRRailDailyTimetable
import org.openapitools.client.models.ServiceDTOVersion2RailTHSRRailDailyTrainInfo
import org.openapitools.client.models.ServiceDTOVersion2RailTHSRRailGeneralTimetable
import org.openapitools.client.models.ServiceDTOVersion2RailTHSRRailODDailyTimetable
import org.openapitools.client.models.ServiceDTOVersion2RailTHSRRailODFare
import org.openapitools.client.models.ServiceDTOVersion2RailTHSRRailStation
import org.openapitools.client.models.ServiceDTOVersion2RailTHSRRailStationTimetable
import org.openapitools.client.models.ServiceDTOVersion2RailTHSRTHSRShape

import org.openapitools.client.infrastructure.*

class THSRApiApi(basePath: kotlin.String = "http://ptx.transportdata.tw/MOTC") : ApiClient(basePath) {

    /**
    * 取得即時通阻事件資料
    * 取得即時通阻事件資料
    * @param$format 指定來源格式 
    * @param$select 挑選 (optional, default to null)
    * @param$filter 過濾 (optional, default to null)
    * @param$orderby 排序 (optional, default to null)
    * @param$top 取前幾筆 (optional, default to 30)
    * @param$skip 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTHSRAlertInfo>
    */
    @Suppress("UNCHECKED_CAST")
    fun tHSRApiAlertInfo($format: kotlin.String,$select: kotlin.String? = null,$filter: kotlin.String? = null,$orderby: kotlin.String? = null,$top: kotlin.String? = null,$skip: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTHSRAlertInfo> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if ($select != null) listOf("$$select") else null, "$filter" to if ($filter != null) listOf("$$filter") else null, "$orderby" to if ($orderby != null) listOf("$$orderby") else null, "$top" to if ($top != null) listOf("$$top") else null, "$skip" to if ($skip != null) listOf("$$skip") else null, "$format" to if ($format != null) listOf("$$format") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/THSR/AlertInfo",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTHSRAlertInfo>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTHSRAlertInfo>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得動態指定[車站]的對號座剩餘座位資訊看板資料
    * 取得動態指定[車站]的對號座剩餘座位資訊看板資料
    * @param stationID 起點車站代碼 
    * @param$format 指定來源格式 
    * @param$select 挑選 (optional, default to null)
    * @param$filter 過濾 (optional, default to null)
    * @param$orderby 排序 (optional, default to null)
    * @param$top 取前幾筆 (optional, default to 30)
    * @param$skip 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTHSRAvailableSeatStatusList>
    */
    @Suppress("UNCHECKED_CAST")
    fun tHSRApiAvailableSeatStatusList(stationID: kotlin.String,$format: kotlin.String,$select: kotlin.String? = null,$filter: kotlin.String? = null,$orderby: kotlin.String? = null,$top: kotlin.String? = null,$skip: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTHSRAvailableSeatStatusList> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if ($select != null) listOf("$$select") else null, "$filter" to if ($filter != null) listOf("$$filter") else null, "$orderby" to if ($orderby != null) listOf("$$orderby") else null, "$top" to if ($top != null) listOf("$$top") else null, "$skip" to if ($skip != null) listOf("$$skip") else null, "$format" to if ($format != null) listOf("$$format") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/THSR/AvailableSeatStatusList/{StationID}".replace("{"+"StationID"+"}", "$stationID"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTHSRAvailableSeatStatusList>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTHSRAvailableSeatStatusList>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得當天所有車次的時刻表資料
    * 取得當天所有車次的時刻表資料
    * @param$format 指定來源格式 
    * @param$select 挑選 (optional, default to null)
    * @param$filter 過濾 (optional, default to null)
    * @param$orderby 排序 (optional, default to null)
    * @param$top 取前幾筆 (optional, default to 30)
    * @param$skip 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTimetable>
    */
    @Suppress("UNCHECKED_CAST")
    fun tHSRApiDailyTimetable($format: kotlin.String,$select: kotlin.String? = null,$filter: kotlin.String? = null,$orderby: kotlin.String? = null,$top: kotlin.String? = null,$skip: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTimetable> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if ($select != null) listOf("$$select") else null, "$filter" to if ($filter != null) listOf("$$filter") else null, "$orderby" to if ($orderby != null) listOf("$$orderby") else null, "$top" to if ($top != null) listOf("$$top") else null, "$skip" to if ($skip != null) listOf("$$skip") else null, "$format" to if ($format != null) listOf("$$format") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/THSR/DailyTimetable/Today",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTimetable>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTimetable>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[日期]所有車次的時刻表資料
    * 取得指定[日期]所有車次的時刻表資料(高鐵提供近28天每日時刻表)
    * @param trainDate 欲查詢的日期(格式: yyyy-MM-dd) 
    * @param$format 指定來源格式 
    * @param$select 挑選 (optional, default to null)
    * @param$filter 過濾 (optional, default to null)
    * @param$orderby 排序 (optional, default to null)
    * @param$top 取前幾筆 (optional, default to 30)
    * @param$skip 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTimetable>
    */
    @Suppress("UNCHECKED_CAST")
    fun tHSRApiDailyTimetableTrainDate(trainDate: kotlin.String,$format: kotlin.String,$select: kotlin.String? = null,$filter: kotlin.String? = null,$orderby: kotlin.String? = null,$top: kotlin.String? = null,$skip: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTimetable> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if ($select != null) listOf("$$select") else null, "$filter" to if ($filter != null) listOf("$$filter") else null, "$orderby" to if ($orderby != null) listOf("$$orderby") else null, "$top" to if ($top != null) listOf("$$top") else null, "$skip" to if ($skip != null) listOf("$$skip") else null, "$format" to if ($format != null) listOf("$$format") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/THSR/DailyTimetable/TrainDate/{TrainDate}".replace("{"+"TrainDate"+"}", "$trainDate"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTimetable>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTimetable>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得當天指定[車次]的時刻表資料
    * 取得當天指定[車次]的時刻表資料
    * @param trainNo 欲查詢車次的代碼 
    * @param$format 指定來源格式 
    * @param$select 挑選 (optional, default to null)
    * @param$filter 過濾 (optional, default to null)
    * @param$orderby 排序 (optional, default to null)
    * @param$top 取前幾筆 (optional, default to 30)
    * @param$skip 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTimetable>
    */
    @Suppress("UNCHECKED_CAST")
    fun tHSRApiDailyTimetableTrainNo(trainNo: kotlin.String,$format: kotlin.String,$select: kotlin.String? = null,$filter: kotlin.String? = null,$orderby: kotlin.String? = null,$top: kotlin.String? = null,$skip: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTimetable> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if ($select != null) listOf("$$select") else null, "$filter" to if ($filter != null) listOf("$$filter") else null, "$orderby" to if ($orderby != null) listOf("$$orderby") else null, "$top" to if ($top != null) listOf("$$top") else null, "$skip" to if ($skip != null) listOf("$$skip") else null, "$format" to if ($format != null) listOf("$$format") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/THSR/DailyTimetable/Today/TrainNo/{TrainNo}".replace("{"+"TrainNo"+"}", "$trainNo"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTimetable>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTimetable>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[日期],[車次]的時刻表資料
    * 取得指定[日期],[車次]的時刻表資料(高鐵提供近28天每日時刻表)
    * @param trainNo 欲查詢車次的代碼 
    * @param trainDate 欲查詢的日期(格式: yyyy-MM-dd) 
    * @param$format 指定來源格式 
    * @param$select 挑選 (optional, default to null)
    * @param$filter 過濾 (optional, default to null)
    * @param$orderby 排序 (optional, default to null)
    * @param$top 取前幾筆 (optional, default to 30)
    * @param$skip 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTimetable>
    */
    @Suppress("UNCHECKED_CAST")
    fun tHSRApiDailyTimetableTrainNoTrainDate(trainNo: kotlin.String, trainDate: kotlin.String,$format: kotlin.String,$select: kotlin.String? = null,$filter: kotlin.String? = null,$orderby: kotlin.String? = null,$top: kotlin.String? = null,$skip: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTimetable> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if ($select != null) listOf("$$select") else null, "$filter" to if ($filter != null) listOf("$$filter") else null, "$orderby" to if ($orderby != null) listOf("$$orderby") else null, "$top" to if ($top != null) listOf("$$top") else null, "$skip" to if ($skip != null) listOf("$$skip") else null, "$format" to if ($format != null) listOf("$$format") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/THSR/DailyTimetable/TrainNo/{TrainNo}/TrainDate/{TrainDate}".replace("{"+"TrainNo"+"}", "$trainNo").replace("{"+"TrainDate"+"}", "$trainDate"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTimetable>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTimetable>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得當天所有車次的車次資料
    * 取得當天所有車次的車次資料
    * @param$format 指定來源格式 
    * @param$select 挑選 (optional, default to null)
    * @param$filter 過濾 (optional, default to null)
    * @param$orderby 排序 (optional, default to null)
    * @param$top 取前幾筆 (optional, default to 30)
    * @param$skip 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTrainInfo>
    */
    @Suppress("UNCHECKED_CAST")
    fun tHSRApiDailyTrainInfo($format: kotlin.String,$select: kotlin.String? = null,$filter: kotlin.String? = null,$orderby: kotlin.String? = null,$top: kotlin.String? = null,$skip: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTrainInfo> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if ($select != null) listOf("$$select") else null, "$filter" to if ($filter != null) listOf("$$filter") else null, "$orderby" to if ($orderby != null) listOf("$$orderby") else null, "$top" to if ($top != null) listOf("$$top") else null, "$skip" to if ($skip != null) listOf("$$skip") else null, "$format" to if ($format != null) listOf("$$format") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/THSR/DailyTrainInfo/Today",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTrainInfo>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTrainInfo>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[日期]所有車次的車次資料
    * 取得指定[日期]所有車次的車次資料(高鐵提供近28天每日時刻表)
    * @param trainDate 欲查詢車次的日期(格式: yyyy-MM-dd) 
    * @param$format 指定來源格式 
    * @param$select 挑選 (optional, default to null)
    * @param$filter 過濾 (optional, default to null)
    * @param$orderby 排序 (optional, default to null)
    * @param$top 取前幾筆 (optional, default to 30)
    * @param$skip 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTrainInfo>
    */
    @Suppress("UNCHECKED_CAST")
    fun tHSRApiDailyTrainInfoTrainDate(trainDate: kotlin.String,$format: kotlin.String,$select: kotlin.String? = null,$filter: kotlin.String? = null,$orderby: kotlin.String? = null,$top: kotlin.String? = null,$skip: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTrainInfo> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if ($select != null) listOf("$$select") else null, "$filter" to if ($filter != null) listOf("$$filter") else null, "$orderby" to if ($orderby != null) listOf("$$orderby") else null, "$top" to if ($top != null) listOf("$$top") else null, "$skip" to if ($skip != null) listOf("$$skip") else null, "$format" to if ($format != null) listOf("$$format") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/THSR/DailyTrainInfo/TrainDate/{TrainDate}".replace("{"+"TrainDate"+"}", "$trainDate"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTrainInfo>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTrainInfo>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得當天指定[車次]的車次資料
    * 取得當天指定[車次]的車次資料
    * @param trainNo 欲查詢車次的代碼 
    * @param$format 指定來源格式 
    * @param$select 挑選 (optional, default to null)
    * @param$filter 過濾 (optional, default to null)
    * @param$orderby 排序 (optional, default to null)
    * @param$top 取前幾筆 (optional, default to 30)
    * @param$skip 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTrainInfo>
    */
    @Suppress("UNCHECKED_CAST")
    fun tHSRApiDailyTrainInfoTrainNo(trainNo: kotlin.String,$format: kotlin.String,$select: kotlin.String? = null,$filter: kotlin.String? = null,$orderby: kotlin.String? = null,$top: kotlin.String? = null,$skip: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTrainInfo> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if ($select != null) listOf("$$select") else null, "$filter" to if ($filter != null) listOf("$$filter") else null, "$orderby" to if ($orderby != null) listOf("$$orderby") else null, "$top" to if ($top != null) listOf("$$top") else null, "$skip" to if ($skip != null) listOf("$$skip") else null, "$format" to if ($format != null) listOf("$$format") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/THSR/DailyTrainInfo/Today/TrainNo/{TrainNo}".replace("{"+"TrainNo"+"}", "$trainNo"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTrainInfo>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTrainInfo>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[日期],[車次]的車次資料
    * 取得指定[日期],[車次]的車次資料(高鐵提供近28天每日時刻表)
    * @param trainNo 欲查詢車次的代碼 
    * @param trainDate 欲查詢車次的日期(格式: yyyy-MM-dd) 
    * @param$format 指定來源格式 
    * @param$select 挑選 (optional, default to null)
    * @param$filter 過濾 (optional, default to null)
    * @param$orderby 排序 (optional, default to null)
    * @param$top 取前幾筆 (optional, default to 30)
    * @param$skip 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTrainInfo>
    */
    @Suppress("UNCHECKED_CAST")
    fun tHSRApiDailyTrainInfoTrainNoTrainDate(trainNo: kotlin.String, trainDate: kotlin.String,$format: kotlin.String,$select: kotlin.String? = null,$filter: kotlin.String? = null,$orderby: kotlin.String? = null,$top: kotlin.String? = null,$skip: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTrainInfo> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if ($select != null) listOf("$$select") else null, "$filter" to if ($filter != null) listOf("$$filter") else null, "$orderby" to if ($orderby != null) listOf("$$orderby") else null, "$top" to if ($top != null) listOf("$$top") else null, "$skip" to if ($skip != null) listOf("$$skip") else null, "$format" to if ($format != null) listOf("$$format") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/THSR/DailyTrainInfo/TrainNo/{TrainNo}/TrainDate/{TrainDate}".replace("{"+"TrainNo"+"}", "$trainNo").replace("{"+"TrainDate"+"}", "$trainDate"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTrainInfo>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTHSRRailDailyTrainInfo>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得所有車次的定期時刻表資料
    * 取得所有車次的定期時刻表資料
    * @param$format 指定來源格式 
    * @param$select 挑選 (optional, default to null)
    * @param$filter 過濾 (optional, default to null)
    * @param$orderby 排序 (optional, default to null)
    * @param$top 取前幾筆 (optional, default to 30)
    * @param$skip 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTHSRRailGeneralTimetable>
    */
    @Suppress("UNCHECKED_CAST")
    fun tHSRApiGeneralTimetable($format: kotlin.String,$select: kotlin.String? = null,$filter: kotlin.String? = null,$orderby: kotlin.String? = null,$top: kotlin.String? = null,$skip: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTHSRRailGeneralTimetable> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if ($select != null) listOf("$$select") else null, "$filter" to if ($filter != null) listOf("$$filter") else null, "$orderby" to if ($orderby != null) listOf("$$orderby") else null, "$top" to if ($top != null) listOf("$$top") else null, "$skip" to if ($skip != null) listOf("$$skip") else null, "$format" to if ($format != null) listOf("$$format") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/THSR/GeneralTimetable",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTHSRRailGeneralTimetable>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTHSRRailGeneralTimetable>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[車次]的定期時刻表資料
    * 取得指定[車次]的定期時刻表資料
    * @param trainNo 欲查詢車次的代碼 
    * @param$format 指定來源格式 
    * @param$select 挑選 (optional, default to null)
    * @param$filter 過濾 (optional, default to null)
    * @param$orderby 排序 (optional, default to null)
    * @param$top 取前幾筆 (optional, default to 30)
    * @param$skip 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTHSRRailGeneralTimetable>
    */
    @Suppress("UNCHECKED_CAST")
    fun tHSRApiGeneralTimetableTrainNo(trainNo: kotlin.String,$format: kotlin.String,$select: kotlin.String? = null,$filter: kotlin.String? = null,$orderby: kotlin.String? = null,$top: kotlin.String? = null,$skip: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTHSRRailGeneralTimetable> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if ($select != null) listOf("$$select") else null, "$filter" to if ($filter != null) listOf("$$filter") else null, "$orderby" to if ($orderby != null) listOf("$$orderby") else null, "$top" to if ($top != null) listOf("$$top") else null, "$skip" to if ($skip != null) listOf("$$skip") else null, "$format" to if ($format != null) listOf("$$format") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/THSR/GeneralTimetable/TrainNo/{TrainNo}".replace("{"+"TrainNo"+"}", "$trainNo"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTHSRRailGeneralTimetable>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTHSRRailGeneralTimetable>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得高鐵最新消息資料
    * 取得高鐵最新消息資料
    * @param$format 指定來源格式 
    * @param$select 挑選 (optional, default to null)
    * @param$filter 過濾 (optional, default to null)
    * @param$orderby 排序 (optional, default to null)
    * @param$top 取前幾筆 (optional, default to 30)
    * @param$skip 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTHSRNews>
    */
    @Suppress("UNCHECKED_CAST")
    fun tHSRApiNews($format: kotlin.String,$select: kotlin.String? = null,$filter: kotlin.String? = null,$orderby: kotlin.String? = null,$top: kotlin.String? = null,$skip: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTHSRNews> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if ($select != null) listOf("$$select") else null, "$filter" to if ($filter != null) listOf("$$filter") else null, "$orderby" to if ($orderby != null) listOf("$$orderby") else null, "$top" to if ($top != null) listOf("$$top") else null, "$skip" to if ($skip != null) listOf("$$skip") else null, "$format" to if ($format != null) listOf("$$format") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/THSR/News",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTHSRNews>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTHSRNews>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[日期],[起迄站間]之時刻表資料
    * 取得指定[日期],[起迄站間]之時刻表資料
    * @param originStationID 起點車站代碼 
    * @param destinationStationID 迄點車站代碼 
    * @param trainDate 欲查詢的日期(格式: yyyy-MM-dd) 
    * @param$format 指定來源格式 
    * @param$select 挑選 (optional, default to null)
    * @param$filter 過濾 (optional, default to null)
    * @param$orderby 排序 (optional, default to null)
    * @param$top 取前幾筆 (optional, default to 30)
    * @param$skip 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTHSRRailODDailyTimetable>
    */
    @Suppress("UNCHECKED_CAST")
    fun tHSRApiODDailyTimetable(originStationID: kotlin.String, destinationStationID: kotlin.String, trainDate: kotlin.String,$format: kotlin.String,$select: kotlin.String? = null,$filter: kotlin.String? = null,$orderby: kotlin.String? = null,$top: kotlin.String? = null,$skip: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTHSRRailODDailyTimetable> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if ($select != null) listOf("$$select") else null, "$filter" to if ($filter != null) listOf("$$filter") else null, "$orderby" to if ($orderby != null) listOf("$$orderby") else null, "$top" to if ($top != null) listOf("$$top") else null, "$skip" to if ($skip != null) listOf("$$skip") else null, "$format" to if ($format != null) listOf("$$format") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/THSR/DailyTimetable/OD/{OriginStationID}/to/{DestinationStationID}/{TrainDate}".replace("{"+"OriginStationID"+"}", "$originStationID").replace("{"+"DestinationStationID"+"}", "$destinationStationID").replace("{"+"TrainDate"+"}", "$trainDate"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTHSRRailODDailyTimetable>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTHSRRailODDailyTimetable>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[起訖站間]之票價資料
    * 取得指定[起訖站間]之票價資料
    * @param originStationID 起點車站代碼 
    * @param destinationStationID 迄點車站代碼 
    * @param$format 指定來源格式 
    * @param$select 挑選 (optional, default to null)
    * @param$filter 過濾 (optional, default to null)
    * @param$orderby 排序 (optional, default to null)
    * @param$top 取前幾筆 (optional, default to 30)
    * @param$skip 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTHSRRailODFare>
    */
    @Suppress("UNCHECKED_CAST")
    fun tHSRApiODFare(originStationID: kotlin.String, destinationStationID: kotlin.String,$format: kotlin.String,$select: kotlin.String? = null,$filter: kotlin.String? = null,$orderby: kotlin.String? = null,$top: kotlin.String? = null,$skip: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTHSRRailODFare> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if ($select != null) listOf("$$select") else null, "$filter" to if ($filter != null) listOf("$$filter") else null, "$orderby" to if ($orderby != null) listOf("$$orderby") else null, "$top" to if ($top != null) listOf("$$top") else null, "$skip" to if ($skip != null) listOf("$$skip") else null, "$format" to if ($format != null) listOf("$$format") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/THSR/ODFare/{OriginStationID}/to/{DestinationStationID}".replace("{"+"OriginStationID"+"}", "$originStationID").replace("{"+"DestinationStationID"+"}", "$destinationStationID"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTHSRRailODFare>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTHSRRailODFare>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得軌道路網實體路線圖資資料
    * 取得軌道路網實體路線圖資資料
    * @param$format 指定來源格式 
    * @param$select 挑選 (optional, default to null)
    * @param$filter 過濾 (optional, default to null)
    * @param$orderby 排序 (optional, default to null)
    * @param$top 取前幾筆 (optional, default to 30)
    * @param$skip 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTHSRTHSRShape>
    */
    @Suppress("UNCHECKED_CAST")
    fun tHSRApiShape($format: kotlin.String,$select: kotlin.String? = null,$filter: kotlin.String? = null,$orderby: kotlin.String? = null,$top: kotlin.String? = null,$skip: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTHSRTHSRShape> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if ($select != null) listOf("$$select") else null, "$filter" to if ($filter != null) listOf("$$filter") else null, "$orderby" to if ($orderby != null) listOf("$$orderby") else null, "$top" to if ($top != null) listOf("$$top") else null, "$skip" to if ($skip != null) listOf("$$skip") else null, "$format" to if ($format != null) listOf("$$format") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/THSR/Shape",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTHSRTHSRShape>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTHSRTHSRShape>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得車站基本資料
    * 取得車站基本資料
    * @param$format 指定來源格式 
    * @param$select 挑選 (optional, default to null)
    * @param$filter 過濾 (optional, default to null)
    * @param$orderby 排序 (optional, default to null)
    * @param$top 取前幾筆 (optional, default to 30)
    * @param$skip 跳過前幾筆 (optional, default to null)
    * @param$spatialFilter 空間過濾 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTHSRRailStation>
    */
    @Suppress("UNCHECKED_CAST")
    fun tHSRApiStation($format: kotlin.String,$select: kotlin.String? = null,$filter: kotlin.String? = null,$orderby: kotlin.String? = null,$top: kotlin.String? = null,$skip: kotlin.String? = null,$spatialFilter: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTHSRRailStation> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if ($select != null) listOf("$$select") else null, "$filter" to if ($filter != null) listOf("$$filter") else null, "$orderby" to if ($orderby != null) listOf("$$orderby") else null, "$top" to if ($top != null) listOf("$$top") else null, "$skip" to if ($skip != null) listOf("$$skip") else null, "$spatialFilter" to if ($spatialFilter != null) listOf("$$spatialFilter") else null, "$format" to if ($format != null) listOf("$$format") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/THSR/Station",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTHSRRailStation>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTHSRRailStation>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[日期],[車站]的站別時刻表資料
    * 取得指定[日期],[車站]的站別時刻表資料
    * @param stationID  
    * @param trainDate  
    * @param$format 指定來源格式 
    * @param$select 挑選 (optional, default to null)
    * @param$filter 過濾 (optional, default to null)
    * @param$orderby 排序 (optional, default to null)
    * @param$top 取前幾筆 (optional, default to 30)
    * @param$skip 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTHSRRailStationTimetable>
    */
    @Suppress("UNCHECKED_CAST")
    fun tHSRApiStationTimetable(stationID: kotlin.String, trainDate: kotlin.String,$format: kotlin.String,$select: kotlin.String? = null,$filter: kotlin.String? = null,$orderby: kotlin.String? = null,$top: kotlin.String? = null,$skip: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTHSRRailStationTimetable> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if ($select != null) listOf("$$select") else null, "$filter" to if ($filter != null) listOf("$$filter") else null, "$orderby" to if ($orderby != null) listOf("$$orderby") else null, "$top" to if ($top != null) listOf("$$top") else null, "$skip" to if ($skip != null) listOf("$$skip") else null, "$format" to if ($format != null) listOf("$$format") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/THSR/DailyTimetable/Station/{StationID}/{TrainDate}".replace("{"+"StationID"+"}", "$stationID").replace("{"+"TrainDate"+"}", "$trainDate"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTHSRRailStationTimetable>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTHSRRailStationTimetable>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
