/**
* MOTC Transport  API V2
* </div>   <div class=\"info_description markdown\">本平臺提供涵蓋全國尺度之公車、臺鐵、高鐵、捷運、航空、自行車等公共運輸旅運資料服務API，歡迎各產政學單位介接使用。<br><span class=\"swagger-description-indicatation\">利用本平臺開放資料進行各項應用服務開發時，請考量不同特性使用者(如:性別/殘障/視障/老幼等)的需求，並歡迎回饋寶貴意見。</span><br><br>資料使用葵花寶典:<a href= https://ptxmotc.gitbooks.io/ptx-api-documentation/content/ >請點我</a><br>資料服務開發實作參考手冊:<a href= https://docs.google.com/viewer?url=https://github.com/ptxmotc/PTX_Web/blob/master/Swagger%E6%9C%8D%E5%8B%99%E8%AA%AA%E6%98%8E%E4%B8%8A%E5%82%B3%E5%8F%83%E8%80%83%E6%AA%94%E6%A1%88/%E5%85%AC%E5%85%B1%E9%81%8B%E8%BC%B8%E6%95%B4%E5%90%88%E8%B3%87%E8%A8%8A%E5%B9%B3%E5%8F%B0%E8%B3%87%E6%96%99%E6%9C%8D%E5%8B%99%E9%96%8B%E7%99%BC%E5%AF%A6%E4%BD%9C.pdf?raw=true >請點我</a><br>API URI Convention文件說明:<a href= https://docs.google.com/viewer?url=https://github.com/ptxmotc/PTX_Web/blob/master/Swagger%E6%9C%8D%E5%8B%99%E8%AA%AA%E6%98%8E%E4%B8%8A%E5%82%B3%E5%8F%83%E8%80%83%E6%AA%94%E6%A1%88/API_URI_Convention%E6%96%87%E4%BB%B6_v1.pdf?raw=true >請點我</a>
*
* OpenAPI spec version: v2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.apis

import org.openapitools.client.models.MOTCAPIModelsHttpStateModel
import org.openapitools.client.models.ServiceDTOVersion2RailTRALine
import org.openapitools.client.models.ServiceDTOVersion2RailTRARailDailyTimetable
import org.openapitools.client.models.ServiceDTOVersion2RailTRARailDailyTrainInfo
import org.openapitools.client.models.ServiceDTOVersion2RailTRARailGeneralTimetable
import org.openapitools.client.models.ServiceDTOVersion2RailTRARailGeneralTrainInfo
import org.openapitools.client.models.ServiceDTOVersion2RailTRARailLiveBoard
import org.openapitools.client.models.ServiceDTOVersion2RailTRARailLiveTrainDelay
import org.openapitools.client.models.ServiceDTOVersion2RailTRARailODDailyTimetable
import org.openapitools.client.models.ServiceDTOVersion2RailTRARailODFare
import org.openapitools.client.models.ServiceDTOVersion2RailTRARailStation
import org.openapitools.client.models.ServiceDTOVersion2RailTRARailStationTimetable
import org.openapitools.client.models.ServiceDTOVersion2RailTRAStationOfLine
import org.openapitools.client.models.ServiceDTOVersion2RailTRATRAShape
import org.openapitools.client.models.ServiceDTOVersion2RailTRATrainType

import org.openapitools.client.infrastructure.*

class TRAApiApi(basePath: kotlin.String = "http://ptx.transportdata.tw/MOTC") : ApiClient(basePath) {

    /**
    * 取得當天所有車次的時刻表資料
    * 取得當天所有車次的時刻表資料
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailDailyTimetable>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiDailyTimetable(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailDailyTimetable> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/DailyTimetable/Today",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailDailyTimetable>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailDailyTimetable>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[日期]所有車次的時刻表資料
    * 取得指定[日期]所有車次的時刻表資料(台鐵提供近60天每日時刻表)
    * @param trainDate 欲查詢的日期(格式: yyyy-MM-dd) 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailDailyTimetable>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiDailyTimetableTrainDate(trainDate: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailDailyTimetable> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/DailyTimetable/TrainDate/{TrainDate}".replace("{"+"TrainDate"+"}", "$trainDate"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailDailyTimetable>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailDailyTimetable>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得當天指定[車次]的時刻表資料
    * 取得當天指定[車次]的時刻表資料
    * @param trainNo 欲查詢車次的代碼 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailDailyTimetable>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiDailyTimetableTrainNo(trainNo: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailDailyTimetable> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/DailyTimetable/Today/TrainNo/{TrainNo}".replace("{"+"TrainNo"+"}", "$trainNo"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailDailyTimetable>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailDailyTimetable>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[日期],[車次]的時刻表資料
    * 取得指定[日期],[車次]的時刻表資料(台鐵提供近60天每日時刻表)
    * @param trainNo 欲查詢車次的代碼 
    * @param trainDate 欲查詢的日期(格式: yyyy-MM-dd) 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailDailyTimetable>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiDailyTimetableTrainNoTrainDate(trainNo: kotlin.String, trainDate: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailDailyTimetable> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/DailyTimetable/TrainNo/{TrainNo}/TrainDate/{TrainDate}".replace("{"+"TrainNo"+"}", "$trainNo").replace("{"+"TrainDate"+"}", "$trainDate"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailDailyTimetable>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailDailyTimetable>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得當天所有車次的車次資料
    * 取得當天所有車次的車次資料
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiDailyTrainInfo(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/DailyTrainInfo/Today",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[日期]所有車次的車次資料
    * 取得指定[日期]所有車次的車次資料(台鐵提供近60天每日時刻表)
    * @param trainDate 欲查詢車次的日期(格式: yyyy-MM-dd) 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiDailyTrainInfoTrainDate(trainDate: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/DailyTrainInfo/TrainDate/{TrainDate}".replace("{"+"TrainDate"+"}", "$trainDate"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得當天指定[車次]的車次資料
    * 取得當天指定[車次]的車次資料
    * @param trainNo 欲查詢車次的代碼 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiDailyTrainInfoTrainNo(trainNo: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/DailyTrainInfo/Today/TrainNo/{TrainNo}".replace("{"+"TrainNo"+"}", "$trainNo"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[日期]與[車次]的車次資料
    * 取得指定[日期]與[車次]的車次資料(台鐵提供近60天每日時刻表)
    * @param trainNo 欲查詢車次的代碼 
    * @param trainDate 欲查詢車次的日期(格式: yyyy-MM-dd) 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiDailyTrainInfoTrainNoTrainDate(trainNo: kotlin.String, trainDate: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/DailyTrainInfo/TrainNo/{TrainNo}/TrainDate/{TrainDate}".replace("{"+"TrainNo"+"}", "$trainNo").replace("{"+"TrainDate"+"}", "$trainDate"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得所有車次的定期時刻表資料
    * 取得所有車次的定期時刻表資料
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailGeneralTimetable>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiGeneralTimetable(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailGeneralTimetable> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/GeneralTimetable",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailGeneralTimetable>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailGeneralTimetable>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[車次]的定期時刻表資料
    * 取得指定[車次]的定期時刻表資料
    * @param trainNo 欲查詢車次的代碼 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailGeneralTimetable>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiGeneralTimetableTrainNo(trainNo: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailGeneralTimetable> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/GeneralTimetable/TrainNo/{TrainNo}".replace("{"+"TrainNo"+"}", "$trainNo"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailGeneralTimetable>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailGeneralTimetable>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得所有車次的定期車次資料
    * 取得所有車次的定期車次資料
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailGeneralTrainInfo>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiGeneralTrainInfo(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailGeneralTrainInfo> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/GeneralTrainInfo",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailGeneralTrainInfo>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailGeneralTrainInfo>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[車次]的定期車次資料
    * 取得指定[車次]的定期車次資料
    * @param trainNo 欲查詢車次的代碼 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailGeneralTrainInfo>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiGeneralTrainInfoTrainNo(trainNo: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailGeneralTrainInfo> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/GeneralTrainInfo/TrainNo/{TrainNo}".replace("{"+"TrainNo"+"}", "$trainNo"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailGeneralTrainInfo>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailGeneralTrainInfo>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得路線基本資料
    * 取得路線基本資料
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRALine>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiLine(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRALine> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/Line",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRALine>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRALine>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得車站別列車即時到離站電子看板(動態前後30分鐘的車次)
    * 取得車站別列車即時到離站電子看板(動態前後30分鐘的車次)。更新頻率：2分鐘。此資料已過濾離站車次資訊
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailLiveBoard>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiLiveBoard(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailLiveBoard> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/LiveBoard",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailLiveBoard>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailLiveBoard>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[車站]列車即時到離站電子看板(動態前後30分鐘的車次)
    * 取得指定[車站]列車即時到離站電子看板(動態前後30分鐘的車次)。更新頻率：2分鐘。此資料已過濾離站車次資訊
    * @param stationID 車站代碼 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailLiveBoard>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiLiveBoardStation(stationID: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailLiveBoard> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/LiveBoard/Station/{StationID}".replace("{"+"StationID"+"}", "$stationID"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailLiveBoard>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailLiveBoard>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得列車即時準點/延誤時間資料
    * 取得列車即時準點/延誤時間資料。更新頻率：2分鐘
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailLiveTrainDelay>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiLiveTrainDelay(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailLiveTrainDelay> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/LiveTrainDelay",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailLiveTrainDelay>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailLiveTrainDelay>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得臺鐵路網資料
    * 取得臺鐵路網資料
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiNetwork(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/Network",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailDailyTrainInfo>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[日期],[起迄站間]之站間時刻表資料
    * 取得指定[日期],[起迄站間]之站間時刻表資料
    * @param originStationID 起點車站代碼 
    * @param destinationStationID 迄點車站代碼 
    * @param trainDate 欲查詢的日期(格式: yyyy-MM-dd) 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailODDailyTimetable>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiODDailyTimetable(originStationID: kotlin.String, destinationStationID: kotlin.String, trainDate: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailODDailyTimetable> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/DailyTimetable/OD/{OriginStationID}/to/{DestinationStationID}/{TrainDate}".replace("{"+"OriginStationID"+"}", "$originStationID").replace("{"+"DestinationStationID"+"}", "$destinationStationID").replace("{"+"TrainDate"+"}", "$trainDate"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailODDailyTimetable>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailODDailyTimetable>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[起訖站間]之票價資料
    * 取得指定[起訖站間]之票價資料
    * @param originStationID 起點車站代碼 
    * @param destinationStationID 迄點車站代碼 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailODFare>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiODFareStation(originStationID: kotlin.String, destinationStationID: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailODFare> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/ODFare/{OriginStationID}/to/{DestinationStationID}".replace("{"+"OriginStationID"+"}", "$originStationID").replace("{"+"DestinationStationID"+"}", "$destinationStationID"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailODFare>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailODFare>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得軌道路網實體路線圖資資料
    * 取得軌道路網實體路線圖資資料
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRATRAShape>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiShape(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRATRAShape> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/Shape",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRATRAShape>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRATRAShape>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得車站基本資料
    * 取得車站基本資料
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @param &#x60;$spatialFilter&#x60; 空間過濾 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailStation>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiStation(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null, &#x60;$spatialFilter&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailStation> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$spatialFilter" to if (&#x60;$spatialFilter&#x60; != null) listOf("$&#x60;$spatialFilter&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/Station",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailStation>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailStation>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得路線車站基本資料
    * 取得路線車站基本資料
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRAStationOfLine>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiStationOfLine(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRAStationOfLine> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/StationOfLine",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRAStationOfLine>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRAStationOfLine>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定[日期],[車站]的站別時刻表資料
    * 取得指定[日期],[車站]的站別時刻表資料
    * @param stationID 車站代號 
    * @param trainDate 時刻表日期(格式: yyyy-MM-dd) 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRARailStationTimetable>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiStationTimetable(stationID: kotlin.String, trainDate: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRARailStationTimetable> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/DailyTimetable/Station/{StationID}/{TrainDate}".replace("{"+"StationID"+"}", "$stationID").replace("{"+"TrainDate"+"}", "$trainDate"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRARailStationTimetable>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRARailStationTimetable>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得所有列車車種資料
    * 取得所有列車車種資料
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailTRATrainType>
    */
    @Suppress("UNCHECKED_CAST")
    fun tRAApiTrainType(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailTRATrainType> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/TRA/TrainType",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailTRATrainType>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailTRATrainType>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
