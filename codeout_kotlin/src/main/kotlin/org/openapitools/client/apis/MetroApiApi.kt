/**
* MOTC Transport  API V2
* </div>   <div class=\"info_description markdown\">本平臺提供涵蓋全國尺度之公車、臺鐵、高鐵、捷運、航空、自行車等公共運輸旅運資料服務API，歡迎各產政學單位介接使用。<br><span class=\"swagger-description-indicatation\">利用本平臺開放資料進行各項應用服務開發時，請考量不同特性使用者(如:性別/殘障/視障/老幼等)的需求，並歡迎回饋寶貴意見。</span><br><br>資料使用葵花寶典:<a href= https://ptxmotc.gitbooks.io/ptx-api-documentation/content/ >請點我</a><br>資料服務開發實作參考手冊:<a href= https://docs.google.com/viewer?url=https://github.com/ptxmotc/PTX_Web/blob/master/Swagger%E6%9C%8D%E5%8B%99%E8%AA%AA%E6%98%8E%E4%B8%8A%E5%82%B3%E5%8F%83%E8%80%83%E6%AA%94%E6%A1%88/%E5%85%AC%E5%85%B1%E9%81%8B%E8%BC%B8%E6%95%B4%E5%90%88%E8%B3%87%E8%A8%8A%E5%B9%B3%E5%8F%B0%E8%B3%87%E6%96%99%E6%9C%8D%E5%8B%99%E9%96%8B%E7%99%BC%E5%AF%A6%E4%BD%9C.pdf?raw=true >請點我</a><br>API URI Convention文件說明:<a href= https://docs.google.com/viewer?url=https://github.com/ptxmotc/PTX_Web/blob/master/Swagger%E6%9C%8D%E5%8B%99%E8%AA%AA%E6%98%8E%E4%B8%8A%E5%82%B3%E5%8F%83%E8%80%83%E6%AA%94%E6%A1%88/API_URI_Convention%E6%96%87%E4%BB%B6_v1.pdf?raw=true >請點我</a>
*
* OpenAPI spec version: v2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.apis

import org.openapitools.client.models.ServiceDTOVersion2RailMetroFirstLastTimetable
import org.openapitools.client.models.ServiceDTOVersion2RailMetroFrequency
import org.openapitools.client.models.ServiceDTOVersion2RailMetroLine
import org.openapitools.client.models.ServiceDTOVersion2RailMetroLineTransfer
import org.openapitools.client.models.ServiceDTOVersion2RailMetroLiveBoard
import org.openapitools.client.models.ServiceDTOVersion2RailMetroMetroShape
import org.openapitools.client.models.ServiceDTOVersion2RailMetroNetwork
import org.openapitools.client.models.ServiceDTOVersion2RailMetroODFare
import org.openapitools.client.models.ServiceDTOVersion2RailMetroRoute
import org.openapitools.client.models.ServiceDTOVersion2RailMetroS2STravelTime
import org.openapitools.client.models.ServiceDTOVersion2RailMetroStation
import org.openapitools.client.models.ServiceDTOVersion2RailMetroStationExit
import org.openapitools.client.models.ServiceDTOVersion2RailMetroStationFacility
import org.openapitools.client.models.ServiceDTOVersion2RailMetroStationOfLine
import org.openapitools.client.models.ServiceDTOVersion2RailMetroStationOfRoute
import org.openapitools.client.models.ServiceDTOVersion2RailMetroStationTimeTable

import org.openapitools.client.infrastructure.*

class MetroApiApi(basePath: kotlin.String = "http://ptx.transportdata.tw/MOTC") : ApiClient(basePath) {

    /**
    * 取得捷運首末班車時刻表資料
    * 取得捷運首末班車時刻表資料
    * @param &#x60;operator&#x60; 欲查詢縣市 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailMetroFirstLastTimetable>
    */
    @Suppress("UNCHECKED_CAST")
    fun metroApiFirstLastTimetable(&#x60;operator&#x60;: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailMetroFirstLastTimetable> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/Metro/FirstLastTimetable/{Operator}".replace("{"+"Operator"+"}", "$&#x60;operator&#x60;"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailMetroFirstLastTimetable>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailMetroFirstLastTimetable>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得捷運路線發車班距頻率資料
    * 取得捷運路線發車班距頻率資料
    * @param &#x60;operator&#x60; 欲查詢縣市 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailMetroFrequency>
    */
    @Suppress("UNCHECKED_CAST")
    fun metroApiFrequency(&#x60;operator&#x60;: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailMetroFrequency> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/Metro/Frequency/{Operator}".replace("{"+"Operator"+"}", "$&#x60;operator&#x60;"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailMetroFrequency>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailMetroFrequency>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得捷運路線基本資料
    * 取得捷運路線基本資料
    * @param &#x60;operator&#x60; 欲查詢縣市 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailMetroLine>
    */
    @Suppress("UNCHECKED_CAST")
    fun metroApiLine(&#x60;operator&#x60;: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailMetroLine> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/Metro/Line/{Operator}".replace("{"+"Operator"+"}", "$&#x60;operator&#x60;"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailMetroLine>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailMetroLine>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得捷運路線站間轉乘基本資料
    * 取得捷運路線站間轉乘基本資料
    * @param &#x60;operator&#x60; 欲查詢縣市 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailMetroLineTransfer>
    */
    @Suppress("UNCHECKED_CAST")
    fun metroApiLineTransfer(&#x60;operator&#x60;: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailMetroLineTransfer> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/Metro/LineTransfer/{Operator}".replace("{"+"Operator"+"}", "$&#x60;operator&#x60;"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailMetroLineTransfer>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailMetroLineTransfer>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得捷運車站別列車即時到離站電子看板資訊
    * 取得捷運車站別列車即時到離站電子看板資訊
    * @param &#x60;operator&#x60; 欲查詢縣市 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailMetroLiveBoard>
    */
    @Suppress("UNCHECKED_CAST")
    fun metroApiLiveBoard(&#x60;operator&#x60;: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailMetroLiveBoard> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/Metro/LiveBoard/{Operator}".replace("{"+"Operator"+"}", "$&#x60;operator&#x60;"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailMetroLiveBoard>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailMetroLiveBoard>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得捷運路網資料
    * 取得捷運路網資料
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailMetroNetwork>
    */
    @Suppress("UNCHECKED_CAST")
    fun metroApiNetwork(&#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailMetroNetwork> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/Metro/Network",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailMetroNetwork>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailMetroNetwork>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得捷運起迄站間票價資料
    * 取得捷運起迄站間票價資料
    * @param &#x60;operator&#x60; 欲查詢縣市 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailMetroODFare>
    */
    @Suppress("UNCHECKED_CAST")
    fun metroApiODFare(&#x60;operator&#x60;: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailMetroODFare> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/Metro/ODFare/{Operator}".replace("{"+"Operator"+"}", "$&#x60;operator&#x60;"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailMetroODFare>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailMetroODFare>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得捷運營運路線基本資料
    * 取得捷運營運路線基本資料
    * @param &#x60;operator&#x60; 欲查詢縣市 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailMetroRoute>
    */
    @Suppress("UNCHECKED_CAST")
    fun metroApiRoute(&#x60;operator&#x60;: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailMetroRoute> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/Metro/Route/{Operator}".replace("{"+"Operator"+"}", "$&#x60;operator&#x60;"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailMetroRoute>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailMetroRoute>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得捷運列車站間運行時間資料
    * 取得捷運列車站間運行時間資料
    * @param &#x60;operator&#x60; 欲查詢縣市 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailMetroS2STravelTime>
    */
    @Suppress("UNCHECKED_CAST")
    fun metroApiS2STravelTime(&#x60;operator&#x60;: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailMetroS2STravelTime> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/Metro/S2STravelTime/{Operator}".replace("{"+"Operator"+"}", "$&#x60;operator&#x60;"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailMetroS2STravelTime>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailMetroS2STravelTime>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得指定營運業者之軌道路網實體路線圖資資料
    * 取得指定營運業者之軌道路網實體路線圖資資料
    * @param &#x60;operator&#x60;  
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailMetroMetroShape>
    */
    @Suppress("UNCHECKED_CAST")
    fun metroApiShape(&#x60;operator&#x60;: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailMetroMetroShape> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/Metro/Shape/{Operator}".replace("{"+"Operator"+"}", "$&#x60;operator&#x60;"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailMetroMetroShape>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailMetroMetroShape>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得捷運車站基本資料
    * 取得捷運車站基本資料
    * @param &#x60;operator&#x60; 欲查詢縣市 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @param &#x60;$spatialFilter&#x60; 空間過濾 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailMetroStation>
    */
    @Suppress("UNCHECKED_CAST")
    fun metroApiStation(&#x60;operator&#x60;: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null, &#x60;$spatialFilter&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailMetroStation> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$spatialFilter" to if (&#x60;$spatialFilter&#x60; != null) listOf("$&#x60;$spatialFilter&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/Metro/Station/{Operator}".replace("{"+"Operator"+"}", "$&#x60;operator&#x60;"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailMetroStation>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailMetroStation>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得捷運車站出入口基本資料
    * 取得捷運車站出入口基本資料
    * @param &#x60;operator&#x60; 欲查詢縣市 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @param &#x60;$spatialFilter&#x60; 空間過濾 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailMetroStationExit>
    */
    @Suppress("UNCHECKED_CAST")
    fun metroApiStationExit(&#x60;operator&#x60;: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null, &#x60;$spatialFilter&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailMetroStationExit> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$spatialFilter" to if (&#x60;$spatialFilter&#x60; != null) listOf("$&#x60;$spatialFilter&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/Metro/StationExit/{Operator}".replace("{"+"Operator"+"}", "$&#x60;operator&#x60;"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailMetroStationExit>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailMetroStationExit>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得捷運車站設施資料
    * 取得捷運車站設施資料
    * @param &#x60;operator&#x60; 欲查詢縣市 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailMetroStationFacility>
    */
    @Suppress("UNCHECKED_CAST")
    fun metroApiStationFacility(&#x60;operator&#x60;: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailMetroStationFacility> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/Metro/StationFacility/{Operator}".replace("{"+"Operator"+"}", "$&#x60;operator&#x60;"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailMetroStationFacility>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailMetroStationFacility>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得捷運路線車站基本資料
    * 取得捷運路線車站基本資料
    * @param &#x60;operator&#x60; 欲查詢縣市 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailMetroStationOfLine>
    */
    @Suppress("UNCHECKED_CAST")
    fun metroApiStationOfLine(&#x60;operator&#x60;: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailMetroStationOfLine> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/Metro/StationOfLine/{Operator}".replace("{"+"Operator"+"}", "$&#x60;operator&#x60;"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailMetroStationOfLine>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailMetroStationOfLine>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得捷運營運路線車站基本資料
    * 取得捷運營運路線車站基本資料
    * @param &#x60;operator&#x60; 欲查詢縣市 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailMetroStationOfRoute>
    */
    @Suppress("UNCHECKED_CAST")
    fun metroApiStationOfRoute(&#x60;operator&#x60;: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailMetroStationOfRoute> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/Metro/StationOfRoute/{Operator}".replace("{"+"Operator"+"}", "$&#x60;operator&#x60;"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailMetroStationOfRoute>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailMetroStationOfRoute>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 取得捷運站別時刻表資料
    * 取得捷運站別時刻表資料
    * @param &#x60;operator&#x60; 欲查詢縣市 
    * @param &#x60;$format&#x60; 指定來源格式 
    * @param &#x60;$select&#x60; 挑選 (optional, default to null)
    * @param &#x60;$filter&#x60; 過濾 (optional, default to null)
    * @param &#x60;$orderby&#x60; 排序 (optional, default to null)
    * @param &#x60;$top&#x60; 取前幾筆 (optional, default to 30)
    * @param &#x60;$skip&#x60; 跳過前幾筆 (optional, default to null)
    * @return kotlin.Array<ServiceDTOVersion2RailMetroStationTimeTable>
    */
    @Suppress("UNCHECKED_CAST")
    fun metroApiStationTimeTable(&#x60;operator&#x60;: kotlin.String, &#x60;$format&#x60;: kotlin.String, &#x60;$select&#x60;: kotlin.String? = null, &#x60;$filter&#x60;: kotlin.String? = null, &#x60;$orderby&#x60;: kotlin.String? = null, &#x60;$top&#x60;: kotlin.String? = null, &#x60;$skip&#x60;: kotlin.String? = null) : kotlin.Array<ServiceDTOVersion2RailMetroStationTimeTable> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: Map<String, List<String>?> = mapOf("$select" to if (&#x60;$select&#x60; != null) listOf("$&#x60;$select&#x60;") else null, "$filter" to if (&#x60;$filter&#x60; != null) listOf("$&#x60;$filter&#x60;") else null, "$orderby" to if (&#x60;$orderby&#x60; != null) listOf("$&#x60;$orderby&#x60;") else null, "$top" to if (&#x60;$top&#x60; != null) listOf("$&#x60;$top&#x60;") else null, "$skip" to if (&#x60;$skip&#x60; != null) listOf("$&#x60;$skip&#x60;") else null, "$format" to if (&#x60;$format&#x60; != null) listOf("$&#x60;$format&#x60;") else null)
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v2/Rail/Metro/StationTimeTable/{Operator}".replace("{"+"Operator"+"}", "$&#x60;operator&#x60;"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ServiceDTOVersion2RailMetroStationTimeTable>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceDTOVersion2RailMetroStationTimeTable>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).statusCode, (response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).statusCode, (response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
