/**
* MOTC Transport  API V2
* </div>   <div class=\"info_description markdown\">本平臺提供涵蓋全國尺度之公車、臺鐵、高鐵、捷運、航空、自行車等公共運輸旅運資料服務API，歡迎各產政學單位介接使用。<br><span class=\"swagger-description-indicatation\">利用本平臺開放資料進行各項應用服務開發時，請考量不同特性使用者(如:性別/殘障/視障/老幼等)的需求，並歡迎回饋寶貴意見。</span><br><br>資料使用葵花寶典:<a href= https://ptxmotc.gitbooks.io/ptx-api-documentation/content/ >請點我</a><br>資料服務開發實作參考手冊:<a href= https://docs.google.com/viewer?url=https://github.com/ptxmotc/PTX_Web/blob/master/Swagger%E6%9C%8D%E5%8B%99%E8%AA%AA%E6%98%8E%E4%B8%8A%E5%82%B3%E5%8F%83%E8%80%83%E6%AA%94%E6%A1%88/%E5%85%AC%E5%85%B1%E9%81%8B%E8%BC%B8%E6%95%B4%E5%90%88%E8%B3%87%E8%A8%8A%E5%B9%B3%E5%8F%B0%E8%B3%87%E6%96%99%E6%9C%8D%E5%8B%99%E9%96%8B%E7%99%BC%E5%AF%A6%E4%BD%9C.pdf?raw=true >請點我</a><br>API URI Convention文件說明:<a href= https://docs.google.com/viewer?url=https://github.com/ptxmotc/PTX_Web/blob/master/Swagger%E6%9C%8D%E5%8B%99%E8%AA%AA%E6%98%8E%E4%B8%8A%E5%82%B3%E5%8F%83%E8%80%83%E6%AA%94%E6%A1%88/API_URI_Convention%E6%96%87%E4%BB%B6_v1.pdf?raw=true >請點我</a>
*
* OpenAPI spec version: v2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models

import org.openapitools.client.models.ServiceDTOVersion2BaseNameType

import com.squareup.moshi.Json
/**
 * 
 * @param plateNumb 車牌號碼 [値為値為-1時，表示目前該站位無車輛行駛]
 * @param stopUID 站牌唯一識別代碼，規則為 {業管機關簡碼} + {StopID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢
 * @param stopID 地區既用中之站牌代碼(為原資料內碼)
 * @param stopName 
 * @param routeUID 路線唯一識別代碼，規則為 {業管機關代碼} + {RouteID}，其中 {業管機關代碼} 可於Authority API中的AuthorityCode欄位查詢
 * @param routeID 地區既用中之路線代碼(為原資料內碼)
 * @param routeName 
 * @param subRouteUID 子路線唯一識別代碼，規則為 {業管機關簡碼} + {SubRouteID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢
 * @param subRouteID 地區既用中之子路線代碼(為原資料內碼)
 * @param subRouteName 
 * @param direction 去返程(該方向指的是此車牌車輛目前所在路線的去返程方向，非指站站牌所在路線的去返程方向，使用時請加值業者多加注意)
 * @param estimateTime 到站時間預估(秒) [當StopStatus値為1~4或PlateNumb値為-1時，EstimateTime値為空値; 反之，EstimateTime有値]
 * @param stopCountDown 車輛距離本站站數
 * @param currentStop 車輛目前所在站牌代碼
 * @param destinationStop 車輛目的站牌代碼
 * @param stopSequence 路線經過站牌之順序
 * @param stopStatus 車輛狀態備註
 * @param messageType 資料型態種類
 * @param nextBusTime 下一班公車到達時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
 * @param isLastBus 是否為末班車
 * @param dataTime 系統演算該筆預估到站資料的時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)[目前僅公總提供此欄位資訊]
 * @param transTime 車機資料傳輸時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz))[該欄位在N1資料中無意義]
 * @param srcRecTime 來源端平台接收時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz))[該欄位在N1資料中無意義]
 * @param srcTransTime 來源端平台資料傳出時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)[公總使用TCP動態即時推播故有提供此欄位, 而非公總系統因使用整包資料更新, 故沒有提供此欄位]
 * @param srcUpdateTime 來源端平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)[公總使用TCP動態即時推播故沒有提供此欄位, 而非公總系統因提供整包資料更新, 故有提供此欄]
 * @param updateTime 本平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
 */
data class ServiceDTOVersion2BusBusN1EstimateTime (
    /* 去返程(該方向指的是此車牌車輛目前所在路線的去返程方向，非指站站牌所在路線的去返程方向，使用時請加值業者多加注意) */
    val direction: ServiceDTOVersion2BusBusN1EstimateTime.Direction,
    /* 本平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz) */
    val updateTime: kotlin.String,
    /* 車牌號碼 [値為値為-1時，表示目前該站位無車輛行駛] */
    val plateNumb: kotlin.String? = null,
    /* 站牌唯一識別代碼，規則為 {業管機關簡碼} + {StopID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢 */
    val stopUID: kotlin.String? = null,
    /* 地區既用中之站牌代碼(為原資料內碼) */
    val stopID: kotlin.String? = null,
    val stopName: ServiceDTOVersion2BaseNameType? = null,
    /* 路線唯一識別代碼，規則為 {業管機關代碼} + {RouteID}，其中 {業管機關代碼} 可於Authority API中的AuthorityCode欄位查詢 */
    val routeUID: kotlin.String? = null,
    /* 地區既用中之路線代碼(為原資料內碼) */
    val routeID: kotlin.String? = null,
    val routeName: ServiceDTOVersion2BaseNameType? = null,
    /* 子路線唯一識別代碼，規則為 {業管機關簡碼} + {SubRouteID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢 */
    val subRouteUID: kotlin.String? = null,
    /* 地區既用中之子路線代碼(為原資料內碼) */
    val subRouteID: kotlin.String? = null,
    val subRouteName: ServiceDTOVersion2BaseNameType? = null,
    /* 到站時間預估(秒) [當StopStatus値為1~4或PlateNumb値為-1時，EstimateTime値為空値; 反之，EstimateTime有値] */
    val estimateTime: kotlin.Int? = null,
    /* 車輛距離本站站數 */
    val stopCountDown: kotlin.Int? = null,
    /* 車輛目前所在站牌代碼 */
    val currentStop: kotlin.String? = null,
    /* 車輛目的站牌代碼 */
    val destinationStop: kotlin.String? = null,
    /* 路線經過站牌之順序 */
    val stopSequence: kotlin.Int? = null,
    /* 車輛狀態備註 */
    val stopStatus: ServiceDTOVersion2BusBusN1EstimateTime.StopStatus? = null,
    /* 資料型態種類 */
    val messageType: ServiceDTOVersion2BusBusN1EstimateTime.MessageType? = null,
    /* 下一班公車到達時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz) */
    val nextBusTime: kotlin.String? = null,
    /* 是否為末班車 */
    val isLastBus: kotlin.Boolean? = null,
    /* 系統演算該筆預估到站資料的時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)[目前僅公總提供此欄位資訊] */
    val dataTime: kotlin.String? = null,
    /* 車機資料傳輸時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz))[該欄位在N1資料中無意義] */
    val transTime: kotlin.String? = null,
    /* 來源端平台接收時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz))[該欄位在N1資料中無意義] */
    val srcRecTime: kotlin.String? = null,
    /* 來源端平台資料傳出時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)[公總使用TCP動態即時推播故有提供此欄位, 而非公總系統因使用整包資料更新, 故沒有提供此欄位] */
    val srcTransTime: kotlin.String? = null,
    /* 來源端平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)[公總使用TCP動態即時推播故沒有提供此欄位, 而非公總系統因提供整包資料更新, 故有提供此欄] */
    val srcUpdateTime: kotlin.String? = null
) {

    /**
    * 去返程(該方向指的是此車牌車輛目前所在路線的去返程方向，非指站站牌所在路線的去返程方向，使用時請加值業者多加注意)
    * Values: _0colon,_1colon
    */
    enum class Direction(val value: kotlin.String){
    
        @Json(name = "0: 去程") _0colon("0: 去程"),
    
        @Json(name = "1: 返程") _1colon("1: 返程");
    
    }

    /**
    * 車輛狀態備註
    * Values: _1colon,_2colon,_3colon,_4colon
    */
    enum class StopStatus(val value: kotlin.String){
    
        @Json(name = "1: 尚未發車") _1colon("1: 尚未發車"),
    
        @Json(name = "2: 交管不停靠") _2colon("2: 交管不停靠"),
    
        @Json(name = "3: 末班車已過") _3colon("3: 末班車已過"),
    
        @Json(name = "4: 今日未營運") _4colon("4: 今日未營運");
    
    }

    /**
    * 資料型態種類
    * Values: _0colon,_1colon,_2colon
    */
    enum class MessageType(val value: kotlin.String){
    
        @Json(name = "0: 未知") _0colon("0: 未知"),
    
        @Json(name = "1: 定期") _1colon("1: 定期"),
    
        @Json(name = "2: 非定期") _2colon("2: 非定期");
    
    }

}

